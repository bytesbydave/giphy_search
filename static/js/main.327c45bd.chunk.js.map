{"version":3,"sources":["reducers/index.js","registerServiceWorker.js","api/giphy.js","components/SearchBar.js","actions/index.js","actions/types.js","components/GifItem.js","components/GifList.js","containers/App.js","index.js"],"names":["initialStateSearch","searchField","initialStateGiphys","isPending","giphys","error","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","axios","create","baseURL","params","api_key","process","limit","connect","searchGiphys","dispatch","onTermSubmit","event","term","target","value","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","response","wrap","_context","prev","next","type","giphy","get","q","sent","payload","data","t0","stop","_x","apply","this","arguments","onSearchChange","react_default","createElement","className","onChange","required","onClick","GifItem","gif","alt","images","title","src","fixed_height_downsampled","url","GifList","renderedGif","gifs","map","components_GifItem","key","id","App","props","components_GifList","components_SearchBar","renderGifList","React","Component","requestGiphys","logger","createLogger","rootReducer","combineReducers","length","undefined","action","objectSpread","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","containers_App","document","getElementById","URL","origin","addEventListener","concat","fetch","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"4QAOMA,EAAqB,CACzBC,YAAa,IAGTC,EAAqB,CACzBC,WAAW,EACXC,OAAQ,GACRC,MAAO,ICJHC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBC,MAAM,SAAAtB,GACLoB,QAAQpB,MAAM,4CAA6CA,kFCpElDuB,WAAMC,OAAO,CAC1BC,QAAS,wBACTC,OAAQ,CACNC,QAASC,mCACTC,MAAO,MCqCIC,cAbS,SAAAZ,GACtB,MAAO,CACLtB,YAAasB,EAAMa,aAAanC,cAIT,SAAAoC,GACzB,MAAO,CACLC,aAAc,SAAAC,GAAK,OAAIF,GCtBEG,EDsBqBD,EAAME,OAAOC,MCtB9B,eAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAI,SAAAC,EAAMZ,GAAN,IAAAa,EAAA,OAAAJ,EAAAC,EAAAI,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACnCjB,EAAS,CAAEkB,KCfwB,0BDcAH,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAGVE,EAAMC,IAAI,kBAAmB,CAClD1B,OAAQ,CACN2B,EAAGlB,KAL0B,OAG3BU,EAH2BE,EAAAO,KAQjCtB,EAAS,CAAEkB,KCrBsB,wBDqBOK,QAASV,EAASW,KAAKA,OAR9BT,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAU,GAAAV,EAAA,SAUjCf,EAAS,CAAEkB,KCtBqB,uBDsBOK,QAAOR,EAAAU,KAVb,yBAAAV,EAAAW,SAAAd,EAAA,iBAAJ,gBAAAe,GAAA,OAAArB,EAAAsB,MAAAC,KAAAC,YAAA,KAAJ,IAAA3B,GDuBzB4B,eAAgB,SAAA7B,GAAK,OAAIF,EC7BpB,CACLkB,KCX+B,sBDY/BK,QD2BiDrB,EAAME,OAAOC,WAInDP,CAtCG,SAAAQ,GAAmD,IAAhD1C,EAAgD0C,EAAhD1C,YAAamE,EAAmCzB,EAAnCyB,eAAgB9B,EAAmBK,EAAnBL,aAChD,OACE+B,EAAAtB,EAAAuB,cAAA,OAAKC,UAAU,cACbF,EAAAtB,EAAAuB,cAAA,OAAKC,UAAU,WACbF,EAAAtB,EAAAuB,cAAA,OAAKC,UAAU,SACbF,EAAAtB,EAAAuB,cAAA,kCACAD,EAAAtB,EAAAuB,cAAA,SACEf,KAAK,OACLb,MAAOzC,EACPuE,SAAUJ,EACVK,UAAQ,KAGZJ,EAAAtB,EAAAuB,cAAA,UACEI,QAASpC,EACTI,MAAOzC,EACPsE,UAAU,qBAHZ,eGPOI,SARC,SAAAhC,GAAa,IAAViC,EAAUjC,EAAViC,IACjB,OACEP,EAAAtB,EAAAuB,cAAA,OAAKC,UAAU,mBACbF,EAAAtB,EAAAuB,cAAA,OAAKO,IAAKD,EAAIE,OAAOC,MAAOC,IAAKJ,EAAIE,OAAOG,yBAAyBC,SCK5DC,SAPC,SAAAxC,GAAc,IACtByC,EADsBzC,EAAX0C,KACQC,IAAI,SAAAV,GAC3B,OAAOP,EAAAtB,EAAAuB,cAACiB,EAAD,CAASX,IAAKA,EAAKY,IAAKZ,EAAIa,OAErC,OAAOpB,EAAAtB,EAAAuB,cAAA,OAAKC,UAAU,YAAYa,KCF9BM,iMAEF,OAAIxB,KAAKyB,MAAMtF,MACNgE,EAAAtB,EAAAuB,cAAA,oBAELJ,KAAKyB,MAAMxF,UACNkE,EAAAtB,EAAAuB,cAAA,sBAEAD,EAAAtB,EAAAuB,cAACsB,EAAD,CAASP,KAAMnB,KAAKyB,MAAMvF,0CAKnC,OACEiE,EAAAtB,EAAAuB,cAAA,OAAKC,UAAU,4BACbF,EAAAtB,EAAAuB,cAACuB,EAAD,MACAxB,EAAAtB,EAAAuB,cAAA,OAAKC,UAAU,YAAYL,KAAK4B,yBAhBtBC,IAAMC,YA8BT7D,cARS,SAAAZ,GACtB,MAAO,CACLnB,OAAQmB,EAAM0E,cAAc7F,OAC5BD,UAAWoB,EAAM0E,cAAc9F,UAC/BE,MAAOkB,EAAM0E,cAAc5F,QAIhB8B,CAEbuD,GC3BIQ,EAASC,yBACTC,EAAcC,YAAgB,CAAEjE,aTKV,WAA6C,IAA5Cb,EAA4C4C,UAAAmC,OAAA,QAAAC,IAAApC,UAAA,GAAAA,UAAA,GAApCnE,EAAoBwG,EAAgBrC,UAAAmC,OAAA,QAAAC,IAAApC,UAAA,GAAAA,UAAA,GAAP,GAChE,OAAQqC,EAAOjD,MACb,IKnB+B,sBLoB7B,OAAOX,OAAA6D,EAAA,EAAA7D,CAAA,GAAKrB,EAAZ,CAAmBtB,YAAauG,EAAO5C,UACzC,QACE,OAAOrC,ISVuC0E,cTcvB,WAA6C,IAA5C1E,EAA4C4C,UAAAmC,OAAA,QAAAC,IAAApC,UAAA,GAAAA,UAAA,GAApCjE,EAAoBsG,EAAgBrC,UAAAmC,OAAA,QAAAC,IAAApC,UAAA,GAAAA,UAAA,GAAP,GACjE,OAAQqC,EAAOjD,MACb,IK1BiC,wBL2B/B,OAAOX,OAAA6D,EAAA,EAAA7D,CAAA,GAAKrB,EAAZ,CAAmBpB,WAAW,IAChC,IK3BiC,wBL4B/B,OAAOyC,OAAA6D,EAAA,EAAA7D,CAAA,GAAKrB,EAAZ,CAAmBnB,OAAQoG,EAAO5C,QAASzD,WAAW,IACxD,IK5BgC,uBL6B9B,OAAOyC,OAAA6D,EAAA,EAAA7D,CAAA,GAAKrB,EAAZ,CAAmBlB,MAAOmG,EAAO5C,QAASzD,WAAW,IACvD,QACE,OAAOoB,MStBPmF,EAAQC,YACZP,EACAQ,YAAgBC,IAAiBX,IAGnCY,IAASC,OACP1C,EAAAtB,EAAAuB,cAAC0C,EAAA,EAAD,CAAUN,MAAOA,GACfrC,EAAAtB,EAAAuB,cAAC2C,EAAD,OAEFC,SAASC,eAAe,SRFX,WACb,GAA6C,kBAAmBrG,UAAW,CAGzE,GADkB,IAAIsG,IAAInF,gBAAwBzB,OAAOC,UAC3C4G,SAAW7G,OAAOC,SAAS4G,OAIvC,OAGF7G,OAAO8G,iBAAiB,OAAQ,WAC9B,IAAMzG,EAAK,GAAA0G,OAAMtF,gBAAN,sBAEP3B,EAwCV,SAAiCO,GAE/B2G,MAAM3G,GACHI,KAAK,SAAAiC,GAGkB,MAApBA,EAASuE,SACuD,IAAhEvE,EAASwE,QAAQjE,IAAI,gBAAgBkE,QAAQ,cAG7C7G,UAAUC,cAAc6G,MAAM3G,KAAK,SAAAC,GACjCA,EAAa2G,aAAa5G,KAAK,WAC7BT,OAAOC,SAASqH,aAKpBlH,EAAgBC,KAGnBc,MAAM,WACLF,QAAQC,IACN,mEA5DAqG,CAAwBlH,GAGxBD,EAAgBC,MQfxBmH","file":"static/js/main.327c45bd.chunk.js","sourcesContent":["import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_GIPHY_PENDING,\n  REQUEST_GIPHY_SUCCESS,\n  REQUEST_GIPHY_FAILED\n} from '../actions/types';\n\nconst initialStateSearch = {\n  searchField: ''\n};\n\nconst initialStateGiphys = {\n  isPending: false,\n  giphys: [],\n  error: ''\n};\n\nexport const searchGiphys = (state = initialStateSearch, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return { ...state, searchField: action.payload };\n    default:\n      return state;\n  }\n};\n\nexport const requestGiphys = (state = initialStateGiphys, action = {}) => {\n  switch (action.type) {\n    case REQUEST_GIPHY_PENDING:\n      return { ...state, isPending: true };\n    case REQUEST_GIPHY_SUCCESS:\n      return { ...state, giphys: action.payload, isPending: false };\n    case REQUEST_GIPHY_FAILED:\n      return { ...state, error: action.payload, isPending: false };\n    default:\n      return state;\n  }\n};\n\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import axios from 'axios';\n\nexport default axios.create({\n  baseURL: 'https://api.giphy.com',\n  params: {\n    api_key: process.env.REACT_APP_GIPHY_API_KEY,\n    limit: 16\n  }\n});\n\n\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { requestGiphys, setSearchField } from '../actions';\n\nconst SearchBar = ({ searchField, onSearchChange, onTermSubmit }) => {\n  return (\n    <div className=\"ui segment\">\n      <div className=\"ui form\">\n        <div className=\"field\">\n          <label>Search for a Gif!</label>\n          <input\n            type=\"text\"\n            value={searchField}\n            onChange={onSearchChange}\n            required\n          />\n        </div>\n        <button\n          onClick={onTermSubmit}\n          value={searchField}\n          className=\"ui primary button\"\n        >\n          Search!\n        </button>\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchGiphys.searchField\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onTermSubmit: event => dispatch(requestGiphys(event.target.value)),\n    onSearchChange: event => dispatch(setSearchField(event.target.value))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SearchBar);\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_GIPHY_PENDING,\n  REQUEST_GIPHY_SUCCESS,\n  REQUEST_GIPHY_FAILED\n} from './types';\n\nimport giphy from '../api/giphy';\n\nexport const setSearchField = text => {\n  return {\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n  };\n};\n\nexport const requestGiphys = term => async dispatch => {\n  dispatch({ type: REQUEST_GIPHY_PENDING });\n  try {\n    const response = await giphy.get('/v1/gifs/search', {\n      params: {\n        q: term\n      }\n    });\n    dispatch({ type: REQUEST_GIPHY_SUCCESS, payload: response.data.data });\n  } catch (err) {\n    dispatch({ type: REQUEST_GIPHY_FAILED, payload: err });\n  }\n};","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_GIPHY_PENDING = 'REQUEST_GIPHY_PENDING';\nexport const REQUEST_GIPHY_SUCCESS = 'REQUEST_GIPHY_SUCCESS';\nexport const REQUEST_GIPHY_FAILED = 'REQUEST_GIPHY_FAILED';\n","import React from 'react';\nimport '../css/GifItem.css'\n\nconst GifItem = ({ gif }) => {\n  return (\n    <div className=\"image-container\">\n      <img alt={gif.images.title} src={gif.images.fixed_height_downsampled.url} />\n    </div>\n  );\n}\n\nexport default GifItem;","import React from 'react';\nimport GifItem from './GifItem';\nimport '../css/GifList.css';\n\nconst GifList = ({ gifs }) => {\n  const renderedGif = gifs.map(gif => {\n    return <GifItem gif={gif} key={gif.id} />;\n  });\n  return <div className=\"gif-grid\">{renderedGif}</div>;\n};\n\nexport default GifList;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport SearchBar from '../components/SearchBar';\nimport GifList from '../components/GifList';\nimport '../css/App.css';\n\nclass App extends React.Component {\n  renderGifList() {\n    if (this.props.error) {\n      return <div>Error</div>;\n    } \n    if (this.props.isPending) {\n      return <div>Pending</div>;\n    } else {\n      return <GifList gifs={this.props.giphys} />;\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"ui container top-contain\">\n        <SearchBar />\n        <div className=\"gif-list\">{this.renderGifList()}</div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    giphys: state.requestGiphys.giphys,\n    isPending: state.requestGiphys.isPending,\n    error: state.requestGiphys.error\n  };\n};\n\nexport default connect(\n  mapStateToProps\n)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport { searchGiphys, requestGiphys } from './reducers';\nimport registerServiceWorker from './registerServiceWorker';\n\nimport App from './containers/App';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchGiphys, requestGiphys });\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunkMiddleware, logger)\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\nregisterServiceWorker();\n"],"sourceRoot":""}